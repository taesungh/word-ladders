{"version":3,"sources":["components/letter.js","components/word_display.js","services/util.js","services/word_transform.js","components/converter.js","App.js","reportWebVitals.js","index.js"],"names":["Letter","char","nextChar","progress","reverse","scale","index","useState","shrinking","setShrinking","useEffect","widths","setUpdate","width","par","svgChar","height","viewBox","style","margin","kerning","d","paths","rotation","preserveAspectRatio","from","to","WordDisplay","word","nextWord","frame","setFrame","handleResize","window","innerWidth","addEventListener","removeEventListener","className","calcWidth","w","map","c","reduce","a","b","Math","min","svgWord","arrs","_","arr","zip","i","desc","title","aria-label","PriorityQueue","this","_heap","item","push","_percolateUp","length","end","pop","_percolateDown","pos","startPos","parentPos","parentItem","halfLength","childPos","right","convertWeighted","s1","s2","wordFreq","prev","distances","unvisited","visited","Set","isEmpty","front","word_curr","has","path","add","substr","charCodeAt","word_next","String","fromCharCode","altDist","_H_WORD","Converter","startWord","setStartWord","endWord","setEndWord","setPath","setIndex","setHeight","setReverse","disperse","setDisperse","updateHeight","hScroll","scrollY","onbeforeunload","disperseStyle","opacity","max","onSubmit","event","preventDefault","conversion","convert","console","log","scrollTo","top","left","behavior","startConversion","type","id","value","onChange","target","placeholder","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.240df268.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MorphTransition } from 'react-svg-morph';\nimport { paths, widths, height, kerning } from '../paths';\n\n\nconst Letter = function({ char, nextChar, progress, reverse, scale, index }) {\n\n  const [shrinking, setShrinking] = useState(false);\n  useEffect(() => {\n    // do not change shrinking when currently morphing\n    setShrinking(reverse !== (widths[nextChar] < widths[char]));\n  }, [char]);\n\n  const [update, setUpdate] = useState(null);\n  useEffect(() => {\n    // temporary fix to prevent pre-flickering to nextChar\n    setUpdate(true);\n  }, []);\n\n  const width =\n    widths[char] + progress * (widths[nextChar] - widths[char]);\n  // MorphTransition is finicky about slice/meet\n  const par = `xMinYMid ${shrinking ? 'slice' : 'meet'}`;\n\n  const svgChar = (char) => (\n    <svg key={index + '_' + char}\n      width={scale * width}\n      height={scale * height}\n      viewBox={`0 0 ${width} ${height}`}\n      style={{margin: `0 ${scale * kerning/2}`}}\n    >\n      <path d={paths[char]} />\n    </svg>\n  );\n\n\n  if (char === nextChar) {\n    return svgChar(char);\n  }\n\n  return (\n    <MorphTransition\n      width={scale * width}\n      height={scale * height}\n      progress={100 * progress}\n      rotation=\"none\"\n      preserveAspectRatio={par}\n      style={{margin: `0 ${scale * kerning/2}`}}\n    >\n      {{\n        from: svgChar(char),\n        to: svgChar(nextChar)\n      }}\n    </MorphTransition>\n  );\n};\n\nexport default Letter;\n","import React, { useState, useEffect } from 'react';\n\nimport Letter from \"./letter\";\nimport { widths, kerning } from '../paths'\n\nconst _MAX_WIDTH = 0.75;\n\n\nconst WordDisplay = function({ word, nextWord, progress, reverse }) {\n\n  const [frame, setFrame] = useState(0);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setFrame(_MAX_WIDTH * window.innerWidth);\n    };\n    handleResize();\n    window.addEventListener('resize', handleResize);\n    // auto clean-up when no longer used\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    }\n  }, []);\n\n\n  if (!word) {\n    return <div className=\"word sticky\" />\n  }\n\n  word = word || \"\";\n  nextWord = nextWord || \"\";\n\n  const calcWidth = (w) => [...w].map((c) => (\n    widths[c] + kerning\n  )).reduce((a, b) => a + b, 0);\n\n  const width =\n    calcWidth(word) + progress * (calcWidth(nextWord) - calcWidth(word));\n  const scale = Math.min(1, frame / width);\n\n  // zip function by ninjagecko\n  const zip = (...arrs) => [...arrs[0]].map((_,c) => arrs.map(arr => arr[c]));\n\n  const svgWord = (zip(word, nextWord)).map(([a, b], i) => (\n    <Letter\n      char={a} nextChar={b}\n      progress={progress}\n      reverse={reverse}\n      index={i} key={a + b + i}\n      scale={scale}\n    />\n  ));\n  \n  const desc = word === nextWord ? word : `${word} to ${nextWord}`;\n\n  return (\n    <div\n      className=\"word sticky\"\n      title={desc}\n      aria-label={desc}\n    >\n      {svgWord}\n    </div>\n  )\n}\n\nexport default WordDisplay;\n","// implements a priority queue using an array to compact a heap\n// similar to the Python implementation of heapq\nexport class PriorityQueue {\n  constructor() {\n    this._heap = [];\n  }\n\n  push(item) {\n    this._heap.push(item);\n    this._percolateUp(this._heap.length - 1);\n  }\n\n  pop() {\n    if (this._heap.length === 0) {\n      return null;\n    }\n\n    const end = this._heap.pop();\n    // replace the front with the maximal element and reorder the heap\n    if (this._heap.length !== 0) {\n      this._heap[0] = end;\n      this._percolateDown(0);\n    }\n  }\n\n  front() {\n    if (this._heap.length === 0) {\n      return null;\n    }\n    return this._heap[0];\n  }\n\n  isEmpty() {\n    return this._heap.length === 0;\n  }\n\n  get length() {\n    return this._heap.length;\n  }\n\n  // restore the heap invariant possibly broken by the element at pos\n  // by sifting larger parent items downwards\n  _percolateUp(pos, startPos=0) {\n    const item = this._heap[pos];\n\n    while (pos > startPos) {\n      // parent element is stored at roughly half index\n      const parentPos = (pos - 1) >> 1;\n      const parentItem = this._heap[parentPos];\n\n      // stop elevating when the item is no longer smaller than the parent\n      if (item >= parentItem) {\n        break;\n      }\n      // bring the larger parent down\n      this._heap[pos] = parentItem;\n      // repeat process for the parent position\n      pos = parentPos;\n    }\n\n    // store the fully elevated item\n    this._heap[pos] = item;\n  }\n\n  // restore the heap invariant possibly broken by the element at pos\n  // by sifting smaller child items upwards\n  _percolateDown(pos) {\n    const startPos = pos;\n    const halfLength = this._heap.length >> 1;\n    const item = this._heap[pos];\n\n    while (pos < halfLength) {\n      // choose smaller of two children\n      let childPos = 2 * pos + 1;\n      const right = childPos + 1;\n      if (right < this.length && this._heap[right] < this._heap[childPos]) {\n        childPos = right;\n      }\n\n      // according to heapq.py/Knuth, do not compare but continue descending\n      // if (this._heap[childPos] >= item) {\n      //   break;\n      // }\n\n      // elevate the smaller child\n      this._heap[pos] = this._heap[childPos];\n      pos = childPos;\n    }\n\n    this._heap[pos] = item;\n    // re-elevate target item which was fully brought down\n    this._percolateUp(pos, startPos)\n  }\n}\n","import { PriorityQueue } from \"./util\";\n\nconst _W_STEP = 0.3\nconst _W_FREQ = 1e6;\n\n/**\n * Determines sequence of intermediate words between the two given words\n * where each adjacent word differs by one character\n * and all intermediate words are part of the valid words\n * @param {string} s1\n * @param {string} s2\n * @param {{string: int}} wordFreq - collection of valid words and frequencies\n * @returns {string[]} - Array of words in conversion\n */\nfunction convertWeighted(s1, s2, wordFreq) {\n  const prev = {};\n  const distances = {};\n\n  // priority queue will store [weight, word] and use default comparison\n  const unvisited = new PriorityQueue();\n  const visited = new Set();\n\n  // default distance is Infinity\n  distances[s1] = 0;\n  prev[s1] = null;\n  unvisited.push([0, s1]);\n\n  // expansive search, based on Dijkstra's algorithm\n  while (!unvisited.isEmpty()) {\n    // select the word with the smallest distance\n    const [dist, word_curr] = unvisited.front();\n\n    if (visited.has(word_curr)) {\n      // ignore leftover duplicate entries with greater distance\n      unvisited.pop();\n      continue;\n    }\n\n    // terminate search when destination word is reached\n    if (word_curr === s2) {\n      let w = word_curr;\n      const path = [w];\n      while (w !== s1) {\n        w = prev[w];\n        path.push(w);\n      }\n      return path.reverse()\n    }\n\n    unvisited.pop();\n    visited.add(word_curr);\n\n    // for each neighboring word found by substituting characters\n    for (let i = 0; i < word_curr.length; ++i) {\n      let a = word_curr.substr(0, i);\n      let b = word_curr.substr(i + 1);\n\n      for (let c = 'a'.charCodeAt(0); c <= 'z'.charCodeAt(0); ++c) {\n        let word_next = a + String.fromCharCode(c) + b;\n\n        // skip invalid words\n        if (!(word_next in wordFreq)) {\n          continue;\n        }\n\n        // alternative distance is current known + distance to word_next\n        let altDist =\n          distances[word_curr] + _W_STEP + _W_FREQ / wordFreq[word_next];\n\n        if (!(visited.has(word_next))) {\n          unvisited.push([altDist, word_next]);\n        }\n\n        // otherwise, update distance if smaller than current known distance\n        if (!(word_next in distances) || altDist < distances[word_next]) {\n          distances[word_next] = altDist;\n          prev[word_next] = word_curr;\n          // update the distance in the priority queue by pushing a duplicate\n          unvisited.push([altDist, word_next]);\n        }\n      }\n    }\n  }\n\n  return [\"no path\"];\n}\n\nexport default convertWeighted;\n","import React, { useState, useEffect } from 'react';\nimport WordDisplay from \"./word_display\";\nimport convert from \"../services/word_transform\";\nimport wordFreq from \"../services/word_freq.json\";\nimport \"./form-input.css\";\nimport \"./converter.css\";\n\nconst _R_PAUSE = 0.2;\nconst _H_WORD = 150;\nconst _H_MORPH = _H_WORD * (1 - _R_PAUSE)\n\n\nconst Converter = function() {\n\n  const [startWord, setStartWord] = useState(\"\");\n  const [endWord, setEndWord] = useState(\"\");\n\n  const [path, setPath] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [reverse, setReverse] = useState(false);\n  const [disperse, setDisperse] = useState(0);\n\n  useEffect(() => {\n    const updateHeight = () => {\n      let hScroll = window.scrollY - _H_WORD;\n      if (hScroll < 0) {\n        setHeight(0);\n        setDisperse(hScroll + _H_WORD);\n      } else if (hScroll <= _H_WORD * (path.length - 1)) {\n        setHeight((height) => {\n          // invert direction if scrolling up\n          setReverse(hScroll <= height);\n          return hScroll;\n        });\n        setIndex((hScroll / _H_WORD) >> 0);\n      } else {  // scroll has excedeed amount needed\n        setHeight(_H_WORD * (path.length - 1) - 1);\n      }\n    };\n\n    window.addEventListener(\"scroll\", updateHeight);\n    // auto clean-up scroll listener\n    return () => {\n      window.removeEventListener(\"scroll\", updateHeight);\n    };\n  }, [path]);\n\n  const progress = Math.min(height % _H_WORD, _H_MORPH) / _H_MORPH;\n\n  const startConversion = () => {\n    const conversion = convert(startWord, endWord, wordFreq);\n    console.log(conversion);\n    console.log(conversion.map((w) => [w, wordFreq[w]]));\n    window.scrollTo({\n      top: 0,\n      left: 0,\n      behavior: 'smooth'    // unsupported in Safari\n    });\n    setPath(conversion);\n    // both necessary to prevent glitches when scrolling back up\n    setIndex(0);\n    setHeight(0);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    startConversion();\n  }\n\n  // attempt to disable \"are you sure\" prompt\n  window.onbeforeunload = null;\n\n  const disperseStyle = {\n    opacity: `${Math.max(0, 0.6 * _H_WORD - disperse)}%`\n  };\n\n  return (\n    <div\n      className=\"converter\"\n      style={{height: path.length > 0 ? `calc(${_H_WORD * path.length}px + 100vh)` : \"50vh\"}}\n    >\n\n      <h3\n        style={disperseStyle}\n      >\n        Enter two words of the same length to find a path between them\n      </h3>\n\n      <form onSubmit={handleSubmit} className=\"conversion-form sticky\">\n\n        <input\n          type=\"text\"\n          id=\"startWord\"\n          className=\"form-control input-word\"\n          value={startWord}\n          onChange={(event) => {\n            setStartWord(event.target.value);\n          }}\n          placeholder=\"starting word\"\n          aria-label=\"starting word\"\n        />\n\n        <span>to</span>\n\n        <input\n          type=\"text\"\n          id=\"endWord\"\n          className=\"form-control input-word\"\n          value={endWord}\n          onChange={(event) => {\n            setEndWord(event.target.value);\n          }}\n          placeholder=\"ending word\"\n          aria-label=\"ending word\"\n        />\n\n        <button\n          type=\"submit\"\n          className=\"btn btn-convert\"\n          disabled={!startWord || !endWord}\n        >\n          Convert\n        </button>\n\n      </form>\n\n      <h3\n        style={disperseStyle}\n      >\n        {path.length > 1 ? \"scroll down to see the word ladder\" : \"\"}\n      </h3>\n\n      <WordDisplay\n        word={path[index]}\n        nextWord={index + 1 < path.length ? path[index+1] : path[index]}\n        progress={progress}\n        reverse={reverse}\n      />\n\n    </div>\n  );\n};\n\nexport default Converter;\n","import './App.css';\n\nimport Converter from './components/converter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"content\">\n        <div className=\"header sticky\">\n          <h1>Word Ladders</h1>\n        </div>\n        <Converter />\n      </div>\n      <div className=\"footer\">\n        Created by Taesung Hwang. Inspiration by Professor Shindler.\n        <br />\n        Original Puzzle by Lewis Carroll.\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}